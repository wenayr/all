/// <reference types="trusted-types" />
import React, { HTMLAttributes, ReactElement } from "react";
export declare const StyleOtherRow: React.CSSProperties;
export declare const StyleOtherColum: React.CSSProperties;
export declare function useOutside({ outsideClick, ref, status }: {
    ref?: React.RefObject<HTMLDivElement | null>;
    outsideClick: () => void;
    status?: boolean;
}): React.RefObject<HTMLDivElement | null>;
type key = React.Key | null | undefined;
type tChildrenFunc = (api: {
    onClose: () => void;
}) => ReactElement | React.JSX.Element;
type tChildrenEl = ReactElement | React.ReactNode;
type tChildren = tChildrenEl | tChildrenFunc;
type tButtonBase = {
    children: tChildren;
    button: ReactElement | ((status: boolean) => ReactElement);
    style?: React.CSSProperties;
    className?: string;
};
type tButton = tButtonBase & {
    statusDef?: boolean;
    keySave?: string;
    outClick?: boolean | (() => void);
    zIndex?: number;
};
export declare function DivOutsideClick2({ children, outsideClick, zIndex, key, style, status }: {
    outsideClick: () => void;
    zIndex?: number;
    key?: key;
    children: tChildrenEl;
    status?: boolean;
    style?: React.CSSProperties;
    className?: string;
}): import("react/jsx-runtime").JSX.Element;
export declare function DivOutsideClick({ children, outsideClick, zIndex, key, style, status, ...other }: HTMLAttributes<any> & {
    outsideClick: () => void;
    status?: boolean;
    zIndex?: number;
    key?: key;
}): React.DetailedReactHTMLElement<{
    ref: React.RefObject<HTMLDivElement | null>;
    key: key;
    style: React.CSSProperties;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoCapitalize?: (string & {}) | "none" | "off" | "on" | "sentences" | "words" | "characters" | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    enterKeyHint?: "search" | "next" | "enter" | "done" | "go" | "previous" | "send" | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: React.AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "off" | "on" | undefined;
    popover?: "" | "auto" | "manual" | "hint" | undefined;
    popoverTargetAction?: "toggle" | "hide" | "show" | undefined;
    popoverTarget?: string | undefined;
    inert?: boolean | undefined;
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    exportparts?: string | undefined;
    part?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "inline" | "none" | "both" | "list" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "link" | "copy" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "other" | "ascending" | "descending" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: React.ClipboardEventHandler<any> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<any> | undefined;
    onCut?: React.ClipboardEventHandler<any> | undefined;
    onCutCapture?: React.ClipboardEventHandler<any> | undefined;
    onPaste?: React.ClipboardEventHandler<any> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<any> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<any> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<any> | undefined;
    onCompositionStart?: React.CompositionEventHandler<any> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<any> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<any> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<any> | undefined;
    onFocus?: React.FocusEventHandler<any> | undefined;
    onFocusCapture?: React.FocusEventHandler<any> | undefined;
    onBlur?: React.FocusEventHandler<any> | undefined;
    onBlurCapture?: React.FocusEventHandler<any> | undefined;
    onChange?: React.FormEventHandler<any> | undefined;
    onChangeCapture?: React.FormEventHandler<any> | undefined;
    onBeforeInput?: React.InputEventHandler<any> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<any> | undefined;
    onInput?: React.FormEventHandler<any> | undefined;
    onInputCapture?: React.FormEventHandler<any> | undefined;
    onReset?: React.FormEventHandler<any> | undefined;
    onResetCapture?: React.FormEventHandler<any> | undefined;
    onSubmit?: React.FormEventHandler<any> | undefined;
    onSubmitCapture?: React.FormEventHandler<any> | undefined;
    onInvalid?: React.FormEventHandler<any> | undefined;
    onInvalidCapture?: React.FormEventHandler<any> | undefined;
    onLoad?: React.ReactEventHandler<any> | undefined;
    onLoadCapture?: React.ReactEventHandler<any> | undefined;
    onError?: React.ReactEventHandler<any> | undefined;
    onErrorCapture?: React.ReactEventHandler<any> | undefined;
    onKeyDown?: React.KeyboardEventHandler<any> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<any> | undefined;
    onKeyPress?: React.KeyboardEventHandler<any> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<any> | undefined;
    onKeyUp?: React.KeyboardEventHandler<any> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<any> | undefined;
    onAbort?: React.ReactEventHandler<any> | undefined;
    onAbortCapture?: React.ReactEventHandler<any> | undefined;
    onCanPlay?: React.ReactEventHandler<any> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<any> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<any> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<any> | undefined;
    onDurationChange?: React.ReactEventHandler<any> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<any> | undefined;
    onEmptied?: React.ReactEventHandler<any> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<any> | undefined;
    onEncrypted?: React.ReactEventHandler<any> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<any> | undefined;
    onEnded?: React.ReactEventHandler<any> | undefined;
    onEndedCapture?: React.ReactEventHandler<any> | undefined;
    onLoadedData?: React.ReactEventHandler<any> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<any> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<any> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<any> | undefined;
    onLoadStart?: React.ReactEventHandler<any> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<any> | undefined;
    onPause?: React.ReactEventHandler<any> | undefined;
    onPauseCapture?: React.ReactEventHandler<any> | undefined;
    onPlay?: React.ReactEventHandler<any> | undefined;
    onPlayCapture?: React.ReactEventHandler<any> | undefined;
    onPlaying?: React.ReactEventHandler<any> | undefined;
    onPlayingCapture?: React.ReactEventHandler<any> | undefined;
    onProgress?: React.ReactEventHandler<any> | undefined;
    onProgressCapture?: React.ReactEventHandler<any> | undefined;
    onRateChange?: React.ReactEventHandler<any> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<any> | undefined;
    onSeeked?: React.ReactEventHandler<any> | undefined;
    onSeekedCapture?: React.ReactEventHandler<any> | undefined;
    onSeeking?: React.ReactEventHandler<any> | undefined;
    onSeekingCapture?: React.ReactEventHandler<any> | undefined;
    onStalled?: React.ReactEventHandler<any> | undefined;
    onStalledCapture?: React.ReactEventHandler<any> | undefined;
    onSuspend?: React.ReactEventHandler<any> | undefined;
    onSuspendCapture?: React.ReactEventHandler<any> | undefined;
    onTimeUpdate?: React.ReactEventHandler<any> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<any> | undefined;
    onVolumeChange?: React.ReactEventHandler<any> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<any> | undefined;
    onWaiting?: React.ReactEventHandler<any> | undefined;
    onWaitingCapture?: React.ReactEventHandler<any> | undefined;
    onAuxClick?: React.MouseEventHandler<any> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<any> | undefined;
    onClick?: React.MouseEventHandler<any> | undefined;
    onClickCapture?: React.MouseEventHandler<any> | undefined;
    onContextMenu?: React.MouseEventHandler<any> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<any> | undefined;
    onDoubleClick?: React.MouseEventHandler<any> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<any> | undefined;
    onDrag?: React.DragEventHandler<any> | undefined;
    onDragCapture?: React.DragEventHandler<any> | undefined;
    onDragEnd?: React.DragEventHandler<any> | undefined;
    onDragEndCapture?: React.DragEventHandler<any> | undefined;
    onDragEnter?: React.DragEventHandler<any> | undefined;
    onDragEnterCapture?: React.DragEventHandler<any> | undefined;
    onDragExit?: React.DragEventHandler<any> | undefined;
    onDragExitCapture?: React.DragEventHandler<any> | undefined;
    onDragLeave?: React.DragEventHandler<any> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<any> | undefined;
    onDragOver?: React.DragEventHandler<any> | undefined;
    onDragOverCapture?: React.DragEventHandler<any> | undefined;
    onDragStart?: React.DragEventHandler<any> | undefined;
    onDragStartCapture?: React.DragEventHandler<any> | undefined;
    onDrop?: React.DragEventHandler<any> | undefined;
    onDropCapture?: React.DragEventHandler<any> | undefined;
    onMouseDown?: React.MouseEventHandler<any> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<any> | undefined;
    onMouseEnter?: React.MouseEventHandler<any> | undefined;
    onMouseLeave?: React.MouseEventHandler<any> | undefined;
    onMouseMove?: React.MouseEventHandler<any> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<any> | undefined;
    onMouseOut?: React.MouseEventHandler<any> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<any> | undefined;
    onMouseOver?: React.MouseEventHandler<any> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<any> | undefined;
    onMouseUp?: React.MouseEventHandler<any> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<any> | undefined;
    onSelect?: React.ReactEventHandler<any> | undefined;
    onSelectCapture?: React.ReactEventHandler<any> | undefined;
    onTouchCancel?: React.TouchEventHandler<any> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<any> | undefined;
    onTouchEnd?: React.TouchEventHandler<any> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<any> | undefined;
    onTouchMove?: React.TouchEventHandler<any> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<any> | undefined;
    onTouchStart?: React.TouchEventHandler<any> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<any> | undefined;
    onPointerDown?: React.PointerEventHandler<any> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<any> | undefined;
    onPointerMove?: React.PointerEventHandler<any> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<any> | undefined;
    onPointerUp?: React.PointerEventHandler<any> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<any> | undefined;
    onPointerCancel?: React.PointerEventHandler<any> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<any> | undefined;
    onPointerEnter?: React.PointerEventHandler<any> | undefined;
    onPointerLeave?: React.PointerEventHandler<any> | undefined;
    onPointerOver?: React.PointerEventHandler<any> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<any> | undefined;
    onPointerOut?: React.PointerEventHandler<any> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<any> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<any> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<any> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<any> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<any> | undefined;
    onScroll?: React.UIEventHandler<any> | undefined;
    onScrollCapture?: React.UIEventHandler<any> | undefined;
    onScrollEnd?: React.UIEventHandler<any> | undefined;
    onScrollEndCapture?: React.UIEventHandler<any> | undefined;
    onWheel?: React.WheelEventHandler<any> | undefined;
    onWheelCapture?: React.WheelEventHandler<any> | undefined;
    onAnimationStart?: React.AnimationEventHandler<any> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<any> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<any> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<any> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<any> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<any> | undefined;
    onToggle?: React.ToggleEventHandler<any> | undefined;
    onBeforeToggle?: React.ToggleEventHandler<any> | undefined;
    onTransitionCancel?: React.TransitionEventHandler<any> | undefined;
    onTransitionCancelCapture?: React.TransitionEventHandler<any> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<any> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<any> | undefined;
    onTransitionRun?: React.TransitionEventHandler<any> | undefined;
    onTransitionRunCapture?: React.TransitionEventHandler<any> | undefined;
    onTransitionStart?: React.TransitionEventHandler<any> | undefined;
    onTransitionStartCapture?: React.TransitionEventHandler<any> | undefined;
}, HTMLDivElement>;
export declare function Button({ keySave, statusDef, outClick, ...data }: tButton): import("react/jsx-runtime").JSX.Element;
export declare function ButtonHover(props: tButtonBase): import("react/jsx-runtime").JSX.Element;
export declare const ButtonOutClick: typeof Button;
export declare function ButtonAbs(...a: Parameters<typeof Button>): import("react/jsx-runtime").JSX.Element;
export {};
