"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.funcListenBySocketObj = exports.funcListenBySocket1 = void 0;
exports.funcListenCallbackBase = funcListenCallbackBase;
exports.funcListenCallbackFast = funcListenCallbackFast;
exports.funcListenCallback = funcListenCallback;
exports.funcListenBySocket2 = funcListenBySocket2;
exports.funcListenBySocket3 = funcListenBySocket3;
exports.funcListenBySocket = funcListenBySocket;
exports.UseListen = UseListen;
exports.CompareKeys = CompareKeys;
exports.CompareKeys2 = CompareKeys2;
exports.DeepCompareKeys2 = DeepCompareKeys2;
exports.DeepCompareKeys = DeepCompareKeys;
exports.deepModifyByListenSocket = deepModifyByListenSocket;
exports.deepModifyByListenSocket2 = deepModifyByListenSocket2;
exports.deepModifyByListenSocket3 = deepModifyByListenSocket3;
exports.PromiseArrayListen = PromiseArrayListen;
exports.socketBuffer3 = socketBuffer3;
exports.funcListenCallbackSnapshot = funcListenCallbackSnapshot;
const isProxy_1 = require("./isProxy");
function funcListenCallbackBase(b, data) {
    const def = { fast: false };
    const { fast, event } = { ...def, ...(data ?? {}) };
    let a;
    const obj = new Map;
    let close = null;
    let lastSize = 0;
    const checkFast = () => {
        if (obj.size == 0) {
            a = null;
            return;
        }
        const ar = [];
        obj.forEach(e => ar.push(e));
        if (obj.size == 1)
            a = ((...e) => { ar[0](...e); });
        if (obj.size == 2)
            a = ((...e) => { ar[0](...e); ar[1](...e); });
        if (obj.size > 2)
            a = ((...e) => {
                for (let i = 0; i < ar.length; i++)
                    ar[i](...e);
            });
    };
    const func = (...e) => { a?.(...e); };
    const run = () => close = b(func) ?? (() => { });
    const api = {
        func,
        isRun: () => close != null,
        run,
        close: () => {
            close?.();
            close = null;
        },
        addListen: (a) => {
            obj.set(a, a);
            if (fast)
                checkFast();
            event?.("add", obj.size, api);
            return () => api.removeListen(a);
        },
        removeListen: (a) => {
            obj.delete(a);
            if (fast)
                checkFast();
            event?.("remove", obj.size, api);
        },
        count: () => obj.size,
        getAllKeys: [...obj.keys()]
    };
    return api;
}
function funcListenCallbackFast(a) {
    return funcListenCallbackBase(a, { fast: true });
}
function funcListenCallback(a, event, fast = true) {
    return funcListenCallbackBase(a, { event, fast });
}
function funcListenBySocket2(e, d) {
    const { stop, addListenClose, status, paramsModify } = d ?? {};
    const { addListen, removeListen, count } = e;
    let last = null;
    let r2 = null;
    function removeCallback() {
        if (last) {
            stop?.(last);
            last = null;
        }
        if (r2)
            removeListen(r2);
        addListenClose?.removeListen(removeCallback);
        return true;
    }
    function callback(z) {
        if (last)
            stop?.(last);
        if (r2)
            removeListen(r2);
        last = z;
        if (!z) {
            console.log(z);
            console.log(e.count());
            console.trace();
        }
        let ta;
        ta = z;
        if (paramsModify)
            ta = (...a) => z(...paramsModify(...a));
        if (status)
            r2 = (...a) => { status() ? ta(...a) : removeListen(r2); };
        else
            r2 = ta;
        addListen(r2);
        addListenClose?.addListen(removeCallback);
    }
    return {
        callback,
        removeCallback
    };
}
function funcListenBySocket3(e, options) {
    const r = funcListenBySocket2(e, { ...options, paramsModify: e => [e] });
    const callback = r.callback;
    return {
        callback,
        removeCallback: r.removeCallback
    };
}
function funcListenBySocket(e, status, onStop) {
    const { addListen, removeListen, count } = e;
    let x = null;
    let r2 = null;
    return {
        callback: (z) => {
            if (x)
                x("___STOP");
            if (r2)
                removeListen(r2);
            x = z;
            if (!z) {
                console.log(z);
                console.log(e.count());
                console.trace();
            }
            r2 = (a) => { status() ? z(a) : removeListen(r2); };
            addListen(r2);
        },
        removeCallback: () => {
            if (x) {
                x("___STOP");
                x = null;
            }
            if (r2)
                removeListen(r2);
            return true;
        }
    };
}
exports.funcListenBySocket1 = funcListenBySocket;
function UseListen(data = { fast: true }) {
    let t;
    const a = funcListenCallbackBase((e) => { t = e; }, { fast: true, ...data });
    a.run();
    t = a.func;
    return [t, a];
}
function CompareKeys(obj1, obj2) {
    const k1 = Object.keys(obj1);
    const k2 = Object.keys(obj2);
    return k1.length == k2.length && ((new Set([...k1, ...k2])).size == k2.length);
}
function CompareKeys2(obj1, keys) {
    const k1 = Object.keys(obj1);
    return k1.length == keys.length && ((new Set([...k1, ...keys])).size == keys.length);
}
function DeepCompareKeys2(obj1, keys, func) {
    if (obj1 == null)
        return null;
    if (typeof obj1 == "function")
        return obj1;
    if (obj1 instanceof Function)
        return obj1;
    if (typeof obj1 != "object")
        return obj1;
    if ((0, isProxy_1.isProxy)(obj1))
        return obj1;
    if (CompareKeys2(obj1, keys)) {
        return func(obj1);
    }
    return Object.fromEntries(Object.entries(obj1).map(([k, v]) => [k, DeepCompareKeys2(v, keys, func)]));
}
function DeepCompareKeys(obj1, obj2, func) {
    if (obj1 == null)
        return null;
    if (typeof obj1 == "function")
        return obj1;
    if (obj1 instanceof Function)
        return obj1;
    if (typeof obj1 != "object")
        return obj1;
    if ((0, isProxy_1.isProxy)(obj1))
        return obj1;
    const keys = Object.keys(obj2);
    if (CompareKeys2(obj1, keys)) {
        return func(obj1);
    }
    return Object.fromEntries(Object.entries(obj1).map(([k, v]) => [k, DeepCompareKeys2(v, keys, func)]));
}
function deepModifyByListenSocket(obj, status) {
    return DeepCompareKeys(obj, funcListenCallbackBase(e => { }), e => (0, exports.funcListenBySocket1)(e, status));
}
function deepModifyByListenSocket2(obj, data) {
    return DeepCompareKeys(obj, funcListenCallbackBase(e => { }), e => funcListenBySocket2(e, data));
}
function deepModifyByListenSocket3(obj, data) {
    return DeepCompareKeys(obj, funcListenCallbackBase(e => { }), e => funcListenBySocket3(e, data));
}
exports.funcListenBySocketObj = deepModifyByListenSocket;
function PromiseArrayListen(array) {
    let ok = 0, error = 0;
    const count = array.length;
    const t = UseListen();
    const c = UseListen();
    const a = (data, i) => {
        ++ok;
        t[0](data, i, ok, error, count);
    };
    const b = (error, i) => {
        ++error;
        c[0](error, i, ok, error, count);
        throw error;
    };
    const arr = array.map((e, i) => e instanceof Promise ? e.then(r => a(r, i)).catch((er) => b(er, i))
        : () => (async () => e())().then(r => a(r, i)).catch((er) => b(er, i)));
    return {
        listenOk: (a) => {
            t[1].addListen(a);
            return () => t[1].removeListen(a);
        },
        listenError: (a) => {
            c[1].addListen(a);
            return () => c[1].removeListen(a);
        },
        promise: {
            all: () => Promise.all(arr),
            allSettled: () => Promise.allSettled(arr),
        },
        getData() { return arr; },
        status() {
            return { ok, error, count };
        }
    };
}
function socketBuffer3(func, callbackMain, memo = {}) {
    return (a, ...b) => func({ ...a, callback: (v) => { const z = callbackMain(v, memo); if (z)
            a.callback(...z); }
    }, ...b);
}
function funcListenCallbackSnapshot({ func, memo = {}, callbackSave, snapshot }) {
    let d = null;
    const [callback, listenA] = UseListen({
        event: (type, count, api) => {
            if (type == "remove" && count == 0) {
                api.close();
                d?.();
            }
            if (type == "add" && count == 1)
                api.run();
        }
    });
    const connect = () => {
        if (d == null)
            d = socketBuffer3(func(), callbackSave, memo)({ callback });
    };
    const run = (...params) => {
        if (!listenA.isRun()) {
            snapshot?.(memo);
            connect();
        }
        return listenA.addListen(...params);
    };
    return { run, snapshot: () => snapshot?.(memo), memo, listenA, connect, get disconnect() { return d; } };
}
