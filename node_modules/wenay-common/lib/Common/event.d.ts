export type tListEvent<T = any, T2 = void> = {
    func?: (data?: T) => T2;
    func2?: (data?: T) => void;
    del?: () => void;
    OnDel?: () => void;
};
export declare class CObjectEventsArr<T extends object> {
    private data;
    private set setup(value);
    AddStart(data: tListEvent): void;
    AddEnd(data: tListEvent): void;
    Add(data: tListEvent): void;
    OnEvent(data?: any): void;
    OnSpecEvent(f: (e: T) => void): void;
    Clean(): void;
    count(): number;
    get length(): number;
}
export declare class CObjectEventsList<T = unknown> {
    constructor(log?: boolean);
    Id: number;
    private _log;
    private data;
    private set setup(value);
    log(): void;
    AddStart(data: tListEvent): void;
    AddEnd(data: tListEvent): void;
    Add(data: tListEvent): void;
    OnEvent(data?: T): void;
    OnSpecEvent<T>(f: (e?: T) => void): void;
    Clean(): void;
    count(): number;
    get length(): number;
}
