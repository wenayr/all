"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CObjectEventsList = exports.CObjectEventsArr = void 0;
const ListNodeAnd_1 = require("./ListNodeAnd");
class CObjectEventsArr {
    data = [];
    set setup(link) {
        const data = link;
        data.del = () => {
            for (let i = 0; i < this.data.length; i++) {
                if (this.data[i] == data) {
                    this.data[i].OnDel?.();
                    this.data.splice(i, 1);
                    data.OnDel?.();
                    return;
                }
            }
            console.error("элемент уже был удален");
            console.trace();
            data.OnDel?.();
            console.log(this.count());
        };
    }
    AddStart(data) { this.data.unshift(data); this.setup = this.data[0]; }
    AddEnd(data) { this.setup = this.data[this.data.push(data) - 1]; }
    Add(data) { this.setup = this.data[this.data.push(data) - 1]; }
    OnEvent(data) { this.data.forEach((e) => { e.func?.(data); e.func2?.(data); }); }
    OnSpecEvent(f) { this.data.forEach((e) => { const l = e.func?.(); l && f(l); e.func2?.(); }); }
    Clean() {
        const a = [...this.data];
        for (let i = a.length - 1; i >= 0; i--) {
            a[i].del?.();
            a[i].OnDel?.();
        }
        this.data = [];
    }
    count() { return this.data.length; }
    get length() { return this.count(); }
}
exports.CObjectEventsArr = CObjectEventsArr;
class CObjectEventsList {
    constructor(log = true) {
        this._log = log;
    }
    Id = 0;
    _log = false;
    data = new ListNodeAnd_1.CListNodeAnd();
    set setup(link) {
        const buf = link;
        const data = link.data;
        let fanClub = data.del;
        data.del = () => {
            fanClub?.();
            fanClub = undefined;
            buf.DeleteLink();
            data.OnDel?.();
        };
        if (this._log && this.count() > 20) {
            console.trace("подозрительное большое количество подписок ", this.count());
            this.log();
        }
    }
    log() { let er = []; this.data.forEach(e => er.push(e)); console.log(er); }
    AddStart(data) { this.setup = this.data.AddStart(data); }
    AddEnd(data) { this.setup = this.data.AddEnd(data); }
    Add(data) { this.setup = this.data.AddEnd(data); }
    OnEvent(data) { this.data.forEach(e => { e.func?.(data); e.func2?.(data); }); }
    OnSpecEvent(f) { this.data.forEach((e) => { let l = e.func?.(); if (l) {
        f(l);
    } e.func2?.(); }); }
    Clean() { let r = this.data.First(); while (r) {
        let buf = r;
        r = r?.Next();
        buf.DeleteLink();
    } }
    count() { return this.data.countRef(); }
    get length() { return this.count(); }
}
exports.CObjectEventsList = CObjectEventsList;
