export declare function enhancedWaitRun(): {
    throttleAsync: (ms: number, func: () => any | Promise<any>) => void;
    debounceAsync: (ms: number, func: () => any | Promise<any>) => Promise<void>;
};
export declare function createAsyncQueue(concurrency?: number): {
    enqueue: <T>(task: () => Promise<T>) => Promise<T>;
    onIdle: () => Promise<void>;
    getQueueSize: () => number;
};
export declare function enhancedQueueRun(maxParallelTasks?: number): {
    readonly queueSize: number;
    enqueue(task: () => Promise<any>): void;
    enqueueAndRun(task: () => Promise<any>): void;
    runAll(): Promise<void>;
};
export declare function waitRun(): {
    refreshAsync: (ms: number, func: () => any | Promise<any>) => void;
    refreshAsync2: (ms: number, func: () => any | Promise<any>) => Promise<void>;
};
export declare function queueRun(n?: number): {
    readonly size: number;
    next: () => Promise<any>;
    nextRun: () => Promise<any>;
    run: () => Promise<void>;
};
