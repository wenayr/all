"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enable = enable;
exports.disable = disable;
exports.__LineFile = __LineFile;
exports.__LineFiles = __LineFiles;
const { self, window } = globalThis;
let _enabled = false;
function enable(flag = true) { _enabled = flag; }
function disable() { _enabled = false; }
let wrapCallSite;
if (1)
    (() => {
        if (typeof self != 'object' && typeof window != "object") {
            function moduleName(name) { return name; }
            let inspector = require(moduleName('inspector'));
            if (inspector.url() != undefined)
                return;
            try {
                let module = require(moduleName('source-map-support'));
                module.install();
                wrapCallSite = module.wrapCallSite;
            }
            catch (e) {
                console.warn(e);
                return;
            }
            _enabled = true;
            const origLogMethod = console.log;
            const origErrorMethod = console.error;
            let _callee;
            for (let methodName of [
                'debug', 'info', 'log', 'warn', 'error', 'group', 'groupCollapsed', 'table', 'timeLog', 'timeEnd',
                'count', 'assert', 'dir', 'dirxml'
            ]) {
                const origMethod = console[methodName];
                console[methodName] = ((...args) => {
                    if (!_enabled)
                        return origMethod(...args);
                    const originalPrepareStackTrace = Error.prepareStackTrace;
                    Error.prepareStackTrace = (_, stack) => stack;
                    let callee = new Error().stack[1];
                    Error.prepareStackTrace = originalPrepareStackTrace;
                    if (!callee) {
                        origErrorMethod("сallee is not found in node_console");
                        _enabled = false;
                        return origMethod(...args);
                    }
                    if (!methodName.match(/debug|info|log|warn|error|dirxml/)) {
                        _callee ??= callee;
                        return origMethod(...args);
                    }
                    if (_callee) {
                        callee = _callee;
                        _callee = undefined;
                    }
                    if (wrapCallSite)
                        callee = wrapCallSite(callee);
                    const fileName = callee.getFileName();
                    if (fileName?.includes("source-map-support")) {
                        origMethod(...args);
                        return;
                    }
                    let fileAndLine = `${fileName}:${callee.getLineNumber()}:${callee.getColumnNumber()}  ` + callee.getFunctionName();
                    fileAndLine = fileAndLine.replaceAll("\\", "/");
                    fileAndLine = fileAndLine.replace("webpack:///", "");
                    fileAndLine = fileAndLine.replace("?", "");
                    if (!fileAndLine.startsWith("./"))
                        if (!fileAndLine.toLowerCase().startsWith("file:///"))
                            fileAndLine = "file:///" + fileAndLine;
                    let [firstArg, ...otherArgs] = args;
                    if (1)
                        origMethod(...args, "", fileAndLine);
                    else if (typeof firstArg === 'string') {
                        origMethod(fileAndLine + ' ' + firstArg, ...otherArgs);
                    }
                    else {
                        origMethod(fileAndLine, ...args);
                    }
                });
            }
        }
    })();
function __LineFile(lvl = 0) {
    if (!_enabled) {
        return "";
    }
    const originalPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (_, stack) => stack;
    let e = new Error().stack[lvl + 1];
    if (wrapCallSite)
        e = wrapCallSite(e);
    Error.prepareStackTrace = originalPrepareStackTrace;
    return `${e.getFileName()}:${e.getLineNumber()}:${e.getColumnNumber()}  ` + e.getFunctionName();
}
function __LineFiles(lvlStart = 0, lvlEnd = 5) {
    if (!_enabled) {
        return "";
    }
    const originalPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (_, stack) => stack;
    let e = new Error().stack.slice(lvlStart + 1, lvlEnd);
    if (wrapCallSite)
        e = e.map(e => wrapCallSite(e));
    const msgs = e.map(e => `${e.getFileName()}:${e.getLineNumber()}:${e.getColumnNumber()}  ` + e.getFunctionName());
    Error.prepareStackTrace = originalPrepareStackTrace;
    return msgs;
}
function test() {
    console.log("LOG");
    console.debug("DEBUG");
    console.warn("WARN");
    console.error("ERROR");
    console.info("INFO");
    console.time("ttt");
    console.timeLog("ttt", "TIME_LOG");
    console.timeEnd("ttt");
    console.count("COUNT");
    console.group("GROUP");
    console.groupEnd();
    console.groupCollapsed("GROUP COLLAPSED");
    console.groupEnd();
    console.table([10, 20, 30]);
    console.assert(false);
    console.dir({ DIR: 10, b: "str", c: { d: 1, e: [5, 6, 7] } });
    console.dirxml("DIRXML", 10, 20, "hello", { a: 5, b: "str" });
    console.trace("TRACE");
}
