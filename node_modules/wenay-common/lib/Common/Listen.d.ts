type tr222<T extends any[]> = (...r: T) => void;
export declare function funcListenCallbackBase<T extends any[]>(b: (e: (tr222<T>)) => (void | (() => void)), data?: {
    event?: (type: "add" | "remove", count: number, api: ReturnType<typeof funcListenCallbackBase<T>>) => void;
    fast?: boolean;
}): {
    func: tr222<T>;
    isRun: () => boolean;
    run: () => () => void;
    close: () => void;
    addListen: (a: tr222<T>) => () => void;
    removeListen: (a: (tr222<T>) | null) => void;
    count: () => number;
    getAllKeys: any[];
};
export declare function funcListenCallbackFast<T extends any[]>(a: (e: (tr222<T> | null)) => (void | (() => void))): {
    func: tr222<T>;
    isRun: () => boolean;
    run: () => () => void;
    close: () => void;
    addListen: (a: tr222<T>) => () => void;
    removeListen: (a: tr222<T> | null) => void;
    count: () => number;
    getAllKeys: any[];
};
export declare function funcListenCallback<T extends any[]>(a: (e: (tr222<T> | null)) => (void | (() => void)), event?: (type: "add" | "remove", count: number, api: ReturnType<typeof funcListenCallbackBase<T>>) => void, fast?: boolean): {
    func: tr222<T>;
    isRun: () => boolean;
    run: () => () => void;
    close: () => void;
    addListen: (a: tr222<T>) => () => void;
    removeListen: (a: tr222<T> | null) => void;
    count: () => number;
    getAllKeys: any[];
};
type tr2<T extends (...a: any[]) => any> = (a: Parameters<T>[0]) => void;
type tr2a<T extends (...a: any[]) => any> = (...a: Parameters<T>) => void;
type t1<T extends any[] = any[]> = ReturnType<typeof funcListenCallback<T>>;
type tta = tr2a<Parameters<t1["addListen"]>[0]>;
export declare function funcListenBySocket2<Z extends any[] = any[]>(e: t1<Z>, d?: {
    readonly status?: () => boolean;
    readonly addListenClose?: t1<any>;
    readonly stop?: (x: tta) => any;
    readonly paramsModify?: (...e: Parameters<tta>) => any[];
}): {
    callback: (z: (...params: Parameters<tr2a<tr222<Z>>>) => void) => void;
    removeCallback: () => boolean;
};
export declare function funcListenBySocket3<Z extends any[] = any[]>(e: t1<Z>, options: Omit<Parameters<typeof funcListenBySocket2>[1], "paramsModify">): {
    callback: (z: (...params: Parameters<tr2<tr222<Z>>>) => void) => void;
    removeCallback: () => boolean;
};
export declare function funcListenBySocket<Z extends any[] = any[]>(e: ReturnType<typeof funcListenCallback<Z>>, status: () => boolean, onStop?: ReturnType<typeof funcListenCallback<any>>): {
    callback: (z: (param: Parameters<Parameters<typeof e.addListen>[0]>[0]) => void) => void;
    removeCallback: () => boolean;
};
export declare const funcListenBySocket1: typeof funcListenBySocket;
export declare function UseListen<T extends any[]>(data?: Parameters<typeof funcListenCallbackBase>[1]): readonly [(...a: T) => void, {
    func: tr222<T>;
    isRun: () => boolean;
    run: () => () => void;
    close: () => void;
    addListen: (a: tr222<T>) => () => void;
    removeListen: (a: tr222<T> | null) => void;
    count: () => number;
    getAllKeys: any[];
}];
type obj = {
    [k: string]: any;
};
export declare function CompareKeys<T extends obj, T2 extends obj>(obj1: T, obj2: T2): boolean;
export declare function CompareKeys2<T extends obj>(obj1: T, keys: string[]): boolean;
export declare function DeepCompareKeys2<T, T3 extends unknown>(obj1: T, keys: string[], func: (a: any) => T3): any;
type tt3<T extends any[]> = typeof funcListenCallbackBase<T>;
type trr2<T> = T extends ReturnType<tt3<infer R>> ? R : never;
type tt33<T extends any[]> = ReturnType<typeof funcListenCallbackBase<T>>;
type tt44<T extends any[]> = ReturnType<typeof funcListenBySocket1<T>>;
type ttt<T> = {
    [K in keyof T]: T[K] extends tt33<any> ? tt44<trr2<T[K]>> : T[K] extends typeof Promise ? T[K] : T[K] extends (...a: any) => any ? T[K] : T[K] extends object ? ttt<T[K]> : T[K];
};
export declare function DeepCompareKeys<T, T2 extends obj, T3 extends unknown>(obj1: T, obj2: T2, func: (a: T2) => T3): {
    [k: string]: any;
} | NonNullable<T> | trr2<T> | null;
export declare function deepModifyByListenSocket<T>(obj: T, status: () => boolean): ttt<T>;
export declare function deepModifyByListenSocket2<T>(obj: T, data: Parameters<typeof funcListenBySocket2>[1]): ttt<T>;
export declare function deepModifyByListenSocket3<T>(obj: T, data: Parameters<typeof funcListenBySocket3>[1]): ttt<T>;
export declare const funcListenBySocketObj: typeof deepModifyByListenSocket;
export declare function PromiseArrayListen<T extends any = unknown>(array: ((() => Promise<T>) | (() => any) | Promise<T>)[]): {
    listenOk: (a: (...d: [data: T, i: number, countOk: number, countError: number, count: number]) => any) => () => void;
    listenError: (a: (...d: [error: any, i: number, countOk: number, countError: number, count: number]) => any) => () => void;
    promise: {
        all: () => Promise<(void | (() => Promise<void>))[]>;
        allSettled: () => Promise<PromiseSettledResult<void | (() => Promise<void>)>[]>;
    };
    getData(): (Promise<void> | (() => Promise<void>))[];
    status(): {
        ok: number;
        error: number;
        count: number;
    };
};
export type realSocket2<T extends any> = (data: {
    callback: (data: T) => void;
    [key: string]: any;
}, ...b: any[]) => (any | (() => any));
export type getTypeCallback<T extends realSocket2<any>> = T extends realSocket2<infer R> ? R : never;
type ParametersOther<T extends (forget: any, ...args: any) => any> = T extends (forget: any, ...args: infer P) => any ? P : never;
type tr22<T> = T extends undefined ? never : T;
export declare function socketBuffer3<T extends realSocket2<any | any[]>, T2 extends (readonly unknown[]) | undefined, T3 extends {
    [key: string]: unknown;
}, T4 extends T3 | (() => T3)>(func: T, callbackMain: (data: getTypeCallback<T>, memo: T3 | T4) => T2, memo?: T3 | T4): (a: Omit<Parameters<T>[0], "callback"> & {
    callback: (...data: tr22<T2>) => any;
}, ...b: ParametersOther<T>) => ReturnType<T>;
export declare function funcListenCallbackSnapshot<T extends realSocket2<any | any[]>, T2 extends (readonly unknown[]) | undefined, T3 extends {
    [key: string]: unknown;
}, T4 extends T3 | (() => T3)>({ func, memo, callbackSave, snapshot }: {
    func: () => T;
    callbackSave: (data: getTypeCallback<T>, memo: T3) => T2;
    memo: T4;
    snapshot?: (memo: T4) => T3;
}): {
    run: (a: tr222<[data: getTypeCallback<T>, memo: T3]>) => () => void;
    snapshot: () => T3 | undefined;
    memo: T4;
    listenA: {
        func: tr222<[data: getTypeCallback<T>, memo: T3]>;
        isRun: () => boolean;
        run: () => () => void;
        close: () => void;
        addListen: (a: tr222<[data: getTypeCallback<T>, memo: T3]>) => () => void;
        removeListen: (a: tr222<[data: getTypeCallback<T>, memo: T3]> | null) => void;
        count: () => number;
        getAllKeys: any[];
    };
    connect: () => void;
    readonly disconnect: ((a: Omit<Parameters<T>[0], "callback"> & {
        callback: (...data: tr22<T2>) => any;
    }, ...b: ParametersOther<T>) => ReturnType<T>) | null;
};
export {};
