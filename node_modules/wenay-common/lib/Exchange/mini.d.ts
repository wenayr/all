import { TF } from "../Common/Time";
import { const_Date } from "../Common/BaseTypes";
export type tAlertMini = Readonly<{
    signal: string;
    alarm: string;
    text: string;
}>;
export type tAlert = Readonly<{
    symbol: string[];
    name: string;
    tf: TF;
}> & tAlertMini;
export type tPrice = number;
export type tTick = Readonly<{
    time: const_Date;
    price: tPrice;
    volume: number;
}>;
export type tPix = () => number;
export type tPercent = number;
export type tFont = () => string;
export type tColor = () => string;
export type tListEvent<T = any, T2 = void> = {
    func?: (data?: T) => T2;
    func2?: (data?: T) => void;
    del?: () => void;
    OnDel?: () => void;
};
export interface interfaceObj<T1, T2> {
    x?: T1;
    y?: T1;
    height?: T2;
    with?: T2;
}
export interface interfacePointBase {
    x?: tPix;
    y?: tPix;
    bar?: tPix;
    time?: tPix;
    price?: tPix;
}
export interface interfacePoint extends interfacePointBase {
    SetSign?(data: interfacePointBase): void;
}
export type tPoint = {};
export interface interfaceFont {
    background?: tColor;
    color?: tColor;
    font?: tFont;
    size?: tPix;
    with?: tPix;
}
export interface interfaceElement<T1, T2> extends interfaceObj<T1, T2> {
    readonly font?: interfaceFont;
    readonly fontSelect?: interfaceFont;
}
export interface interfaceFontT<T, T2> extends interfaceElement<T, T2> {
    readonly font: interfaceFont;
    fontSet(data: interfaceFont): void;
    readonly fontSelect: interfaceFont;
    fontSelectSet(data: interfaceFont): void;
}
export interface interfaceTimePanel extends interfaceFontT<tPix, tPix> {
    height: tPix;
}
export interface interfacePricePanel extends interfaceFontT<tPix, tPix> {
    with: tPix;
}
