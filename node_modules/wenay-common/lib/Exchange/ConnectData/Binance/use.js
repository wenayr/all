"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinanceAcc2F = BinanceAcc2F;
const order_1 = require("./order");
const funcTimeWait_1 = require("../../../Common/funcTimeWait");
const binanceFunc = order_1.spaceBinance.binanceFunc;
const helper4 = (obj, k) => {
    const t = obj[k];
    if (typeof t == "function") {
        return ((...a) => {
            const wight = obj.wight;
            const func = (wight) => {
                const now = funcTimeWait_1.FuncTimeWait.weight(wight.type, wight.timeMs);
                if (now + wight.wight > wight.max) {
                    throw { wait: wight.max - now + wight.wight };
                }
                funcTimeWait_1.FuncTimeWait.add({ weight: wight.wight, type: wight.type });
            };
            if (wight) {
                const arr = Array.isArray(wight) ? wight : [wight];
                arr.forEach(e => func(e));
            }
            return t(...a);
        });
    }
    return t;
};
function BinanceFuncConvert(data, input) {
    let tt = data;
    for (let key in data) {
        const a = data[key];
        if (typeof a == "function") {
            const buf = a(input);
            tt[key] = helper4(buf, "function");
        }
    }
    return tt;
}
function BinanceFuncConvert2(data, input) {
    let tt = data;
    for (let key in data) {
        const a = data[key];
        if (typeof a == "function") {
            const buf = a(input);
            tt[key] = helper4(buf, "function");
        }
    }
    return tt;
}
function BinanceAcc2F(data) {
    const BFunc = BinanceFuncConvert(binanceFunc, data);
    return {
        all: BFunc,
        transfer: {
            isolatedToSpot: BFunc.transferIsolatedToSpotF,
            spotToIsolated: BFunc.transferIsolatedF,
            maxTransferableIsolated: BFunc.maxTransferableIsolatedF,
            maxTransferableCross: BFunc.maxTransferableCrossF,
        },
        spot: {
            maxBorrowableCross: binanceFunc.maxBorrowableCrossF,
        },
        iso: {
            updateIsolatedAccsInfo: BFunc.updateIsolatedAccsInfo–êF,
            maxBorrowableIsolated: BFunc.maxBorrowableIsolatedF,
            disableIsolatedAcc: BFunc.disableIsolatedAccF,
            enableIsolatedAcc: BFunc.enableIsolatedAccF,
            getIsolatedAccountsLimit: BFunc.getIsolatedAccountsLimitF,
            getIsolationFeeData: BFunc.getIsolationFeeDataF,
            getIsolationFeeDataBySymbol: BFunc.getIsolationFeeDataBySymbolF,
        },
        futures: {},
    };
}
