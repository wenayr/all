import { AxiosStatic } from "axios";
import type { tGetSignatureFunc } from "./signatureCoder";
import { IBorrowable, IIsolatedAcc } from "./interfaces";
export declare namespace spaceBinance {
    type tOrderSymbolMarket = {
        symbol: string;
        minLot: number;
        stepLot: number;
        stepPrice: number;
    };
    type tOrderMarket = tOrderSymbolMarket & {
        volume: number;
        params?: {
            reduceOnly: boolean;
        };
    };
    type tOrderLimit = tOrderMarket & {
        price: number;
    };
    type tOrderCancel = tOrderMarket & {
        orderId: number;
    };
    type IOrder = {
        buy(data: tOrderMarket): Promise<void>;
        sell(data: tOrderMarket): Promise<void>;
        buyLimit(data: tOrderLimit): Promise<void>;
        sellLimit(data: tOrderLimit): Promise<void>;
        cancelOrders(data: tOrderCancel): Promise<void>;
        getOrders(): Promise<void>;
    };
    export function binanceSpot(binance: any): IOrder;
    export function binanceFutures(binance: any): IOrder;
    export function binanceIso(binance: any): IOrder;
    type tAcc = "SPOT" | "MARGIN" | "FUTURES";
    type tTransfer = {
        from: tAcc;
        to: tAcc;
        amount: number;
        asset?: string;
    };
    export function transferMoneyF(binance: any): (data: tTransfer) => Promise<true>;
    export type tFtt = {
        apiKey: string;
        axios: AxiosStatic;
        apiSecret: string;
        GetSignatureFunc: tGetSignatureFunc;
    };
    export type tFF = {
        type: "IP" | "UID" | string;
        wight: number;
        timeMs: number;
        max: number;
    };
    type standard<T extends (...args: any) => any> = {
        wight: tFF | tFF[];
        function: T;
    };
    type tMaxBorrowableCrossF = (asset: string) => Promise<IBorrowable>;
    type tSimpleFunc = (...arg: any) => any;
    type tSimpleFunc2<T> = (arg: T) => (standard<tSimpleFunc>);
    export class BinanceDataFunc {
        [ket: string]: tSimpleFunc2<tFtt>;
        maxBorrowableCrossF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): standard<tMaxBorrowableCrossF>;
        maxBorrowableIsolatedF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, isolatedSymbol: string) => Promise<IBorrowable>;
        };
        maxTransferableCrossF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, isolatedSymbol: string) => Promise<{
                amount: number;
            }>;
        };
        maxTransferableIsolatedF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, isolatedSymbol: string) => Promise<{
                amount: number;
            }>;
        };
        transferIsolatedF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, symbol: string, amount: number | string, fromAccountType: "ISOLATED_MARGIN" | "MARGIN") => Promise<{
                tranId: number;
                code?: number;
            }>;
        };
        transferIsolatedToSpotF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, symbol: string, amount: number | string, transFrom: "ISOLATED_MARGIN" | "SPOT") => Promise<{
                tranId: number;
                code?: number;
            }>;
        };
        updateIsolatedAccsInfoАF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (asset: string, symbol: string, amount: number | string, transFrom: "ISOLATED_MARGIN" | "SPOT") => Promise<{
                assets?: IIsolatedAcc[];
                totalAssetOfBtc?: number;
            }>;
        };
        disableIsolatedAccF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (symbol: string) => Promise<boolean>;
        };
        enableIsolatedAccF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (symbol: string) => Promise<boolean>;
        };
        getIsolatedAccountsLimitF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (symbol: string) => Promise<any>;
        };
        getIsolationFeeDataF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (symbol: string) => Promise<any>;
        };
        getIsolationFeeDataBySymbolF({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: (symbol: string) => Promise<any>;
        };
        getAllCrossMarginPairs({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: () => Promise<any>;
        };
        getAllCrossIsolatePairs({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: () => Promise<any>;
        };
        crossMarginAccountDetails({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt): {
            wight: {
                type: string;
                wight: number;
                max: number;
                timeMs: number;
            };
            function: () => Promise<any>;
        };
    }
    export const binanceFunc: BinanceDataFunc;
    export {};
}
