import { spaceBinance } from "./order";
import tFtt = spaceBinance.tFtt;
export type Simple22<T> = {
    [key in keyof T]: (T[key] extends (a: any) => infer Result ? (Result extends {
        function: any;
    } ? Result["function"] : T[key]) : T[key]);
};
export declare function BinanceAcc2F(data: spaceBinance.tFtt): {
    all: Simple22<spaceBinance.BinanceDataFunc>;
    transfer: {
        isolatedToSpot: (asset: string, symbol: string, amount: number | string, transFrom: "ISOLATED_MARGIN" | "SPOT") => Promise<{
            tranId: number;
            code?: number;
        }>;
        spotToIsolated: (asset: string, symbol: string, amount: number | string, fromAccountType: "ISOLATED_MARGIN" | "MARGIN") => Promise<{
            tranId: number;
            code?: number;
        }>;
        maxTransferableIsolated: (asset: string, isolatedSymbol: string) => Promise<{
            amount: number;
        }>;
        maxTransferableCross: (asset: string, isolatedSymbol: string) => Promise<{
            amount: number;
        }>;
    };
    spot: {
        maxBorrowableCross: ({ axios, apiKey, apiSecret, GetSignatureFunc }: tFtt) => {
            wight: spaceBinance.tFF | spaceBinance.tFF[];
            function: (asset: string) => Promise<import("./interfaces").IBorrowable>;
        };
    };
    iso: {
        updateIsolatedAccsInfo: (asset: string, symbol: string, amount: number | string, transFrom: "ISOLATED_MARGIN" | "SPOT") => Promise<{
            assets?: import("./interfaces").IIsolatedAcc[];
            totalAssetOfBtc?: number;
        }>;
        maxBorrowableIsolated: (asset: string, isolatedSymbol: string) => Promise<import("./interfaces").IBorrowable>;
        disableIsolatedAcc: (symbol: string) => Promise<boolean>;
        enableIsolatedAcc: (symbol: string) => Promise<boolean>;
        getIsolatedAccountsLimit: (symbol: string) => Promise<any>;
        getIsolationFeeData: (symbol: string) => Promise<any>;
        getIsolationFeeDataBySymbol: (symbol: string) => Promise<any>;
    };
    futures: {};
};
