type tFunc<P> = {
    name: string;
    nameType: string;
    wight?: {
        name: string;
        data: number;
    }[];
    address?: {
        type: "GET" | "POST" | string;
        url: string;
        HMAC?: boolean;
    };
    params?: P | undefined;
};
type tData = <T, P = undefined>(data: tFunc<P>) => T;
export declare class CBinanceMarketDataMini {
    ExchangeInformation: (data: tData) => (params: {}) => {
        timezone: string;
        serverTime: number;
        rateLimits: [{}];
        exchangeFilters: [];
        symbols: [{
            "symbol": string;
            "status": string;
            "baseAsset": string;
            "baseAssetPrecision": number;
            "quoteAsset": string;
            "quotePrecision": number;
            "quoteAssetPrecision": number;
            "orderTypes": ("LIMIT" | "LIMIT_MAKER" | "MARKET" | "STOP_LOSS" | "STOP_LOSS_LIMIT" | "TAKE_PROFIT" | "TAKE_PROFIT_LIMIT")[];
            "icebergAllowed": boolean;
            "ocoAllowed": boolean;
            "quoteOrderQtyMarketAllowed": boolean;
            "allowTrailingStop": boolean;
            "cancelReplaceAllowed": boolean;
            "isSpotTradingAllowed": boolean;
            "isMarginTradingAllowed": boolean;
            "filters": [];
            "permissions": [string, string];
            "defaultSelfTradePreventionMode": string;
            "allowedSelfTradePreventionModes": [string];
        }];
    };
}
export {};
