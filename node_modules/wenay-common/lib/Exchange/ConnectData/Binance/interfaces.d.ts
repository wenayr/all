type tSide = "BUY" | "SELL";
type tType = "LIMIT" | "MARKET" | "STOP_LOSS" | "STOP_LOSS_LIMIT" | "TAKE_PROFIT" | "TAKE_PROFIT_LIMIT" | "LIMIT_MAKER";
type tStatus = "NEW" | "PARTIALLY_FILLED" | "FILLED" | "CANCELED" | "PENDING_CANCEL" | "REJECTED" | "EXPIRED";
interface IIsoAssetRes {
    "asset": string;
    "borrowEnabled": boolean;
    "borrowed": string | number;
    "free": string | number;
    "interest": string | number;
    "locked": string | number;
    "netAsset": string | number;
    "netAssetOfBtc": string | number;
    "repayEnabled": boolean;
    "totalAsset": string | number;
}
export interface IIsolatedAcc {
    "baseAsset": IIsoAssetRes;
    "quoteAsset": IIsoAssetRes;
    "symbol": string;
    "isolatedCreated": boolean;
    "marginLevel": string | number;
    "marginLevelStatus": "EXCESSIVE" | "NORMAL" | "MARGIN_CALL" | "PRE_LIQUIDATION" | "FORCE_LIQUIDATION";
    "marginRatio": string | number;
    "indexPrice": string | number;
    "liquidatePrice": string | number;
    "liquidateRate": string | number;
    "tradeEnabled": boolean;
    "enabled": boolean;
}
export type IBorrowable = {
    "amount": number;
    "borrowLimit": number;
    code?: number;
};
export interface IOrderUpdateSpotOrMargin {
    symbol: string;
    orderId: number;
    clientOrderId: string;
    origQty: number;
    executedQty: number;
    price: number;
    side: tSide;
    type: tType;
    status: tStatus;
    rejectReason?: "NONE" | number | string;
}
export interface IOrderUpdateSpotOrMarginMapById {
    [key: string]: IOrderUpdateSpotOrMargin;
}
export interface IOrderSpotOrMargin {
    symbol: string;
    side: tSide;
    type: tType;
    timeInForce: "GTC" | "IOC" | "FOK" | "GTX";
    quantity: number;
    price?: number;
    newClientOrderId?: string;
    timestamp: number;
}
export interface IHistoryTradeSpot {
    symbol: string;
    id: number;
    orderId: number;
    orderListId?: number;
    price: number;
    qty: number;
    quoteQty?: number;
    commission: number;
    commissionAsset: string;
    time: number;
    isBuyer: boolean;
    isMaker: boolean;
    isBestMatch: boolean;
}
export interface ISpotOrderRaw {
    symbol: string;
    code?: number;
    orderId: number;
    orderListId: number;
    clientOrderId: string;
    origClientOrderId?: string;
    transactTime?: number;
    price: number;
    origQty: number;
    executedQty: number;
    cummulativeQuoteQty: number;
    status: tStatus;
    timeInForce: "GTC" | "IOC" | "FOK" | "GTX";
    type: tType;
    side: tSide;
    strategyId?: number;
    strategyType?: number;
    fills?: [
        {
            "price": number;
            "qty": number;
            "commission": number;
            "commissionAsset": string;
            "tradeId": number;
        }[]
    ];
}
export interface IMarginAsset {
    asset: string;
    free: number;
    locked: number;
    borrowed: number;
    interest: number;
    netAsset: number;
    isRequest?: boolean;
}
export interface IMarginAssets {
    [key: string]: IMarginAsset;
}
export interface ISpotAsset {
    asset: string;
    free: number;
    locked: number;
}
export interface ISpotAssets {
    [key: string]: ISpotAsset;
}
export interface IFuturesAssets {
    [key: string]: {
        asset: string;
        walletBalance: number;
        availableBalance?: number;
    };
}
export interface IFuturesPositions {
    [key: string]: IAccUpdatePositionFutures;
}
export interface IBBO {
    bestAsk: number;
    bestBid: number;
}
interface IIsoAssetRes {
    "asset": string;
    "borrowEnabled": boolean;
    "borrowed": string | number;
    "free": string | number;
    "interest": string | number;
    "locked": string | number;
    "netAsset": string | number;
    "netAssetOfBtc": string | number;
    "repayEnabled": boolean;
    "totalAsset": string | number;
}
export interface IIsolatedAcc {
    "baseAsset": IIsoAssetRes;
    "quoteAsset": IIsoAssetRes;
    "symbol": string;
    "isolatedCreated": boolean;
    "marginLevel": string | number;
    "marginLevelStatus": "EXCESSIVE" | "NORMAL" | "MARGIN_CALL" | "PRE_LIQUIDATION" | "FORCE_LIQUIDATION";
    "marginRatio": string | number;
    "indexPrice": string | number;
    "liquidatePrice": string | number;
    "liquidateRate": string | number;
    "tradeEnabled": boolean;
    "enabled": boolean;
}
export interface IAssetRawFutures {
    asset: string;
    walletBalance: string;
    unrealizedProfit: string;
    marginBalance: string;
    maintMargin: string;
    initialMargin: string;
    positionInitialMargin: string;
    openOrderInitialMargin: string;
    crossWalletBalance: string;
    crossUnPnl: string;
    availableBalance: string;
    maxWithdrawAmount: string;
    marginAvailable: boolean;
    updateTime: number;
}
export interface IPositionRawFutures {
    symbol: string;
    initialMargin: string;
    maintMargin: string;
    unrealizedProfit: string;
    positionInitialMargin: string;
    openOrderInitialMargin: string;
    leverage: string;
    isolated: boolean;
    entryPrice: string;
    maxNotional: string;
    positionSide: 'BOTH' | 'LONG' | 'SHORT';
    positionAmt: string;
}
export interface IAccountInfoRawFutures {
    feeTier: number;
    canTrade: boolean;
    canDeposit: boolean;
    canWithdraw: boolean;
    updateTime: number;
    totalInitialMargin: string;
    totalMaintMargin: string;
    totalWalletBalance: string;
    totalUnrealizedProfit: string;
    totalMarginBalance: string;
    totalPositionInitialMargin: string;
    totalOpenOrderInitialMargin: string;
    totalCrossWalletBalance: string;
    totalCrossUnPnl: string;
    availableBalance: string;
    maxWithdrawAmount: string;
    assets: IAssetRawFutures[];
    positions: IPositionRawFutures[];
}
export interface IOrderFutures {
    symbol?: string;
    clientOrderId?: string;
    side?: 'BUY' | 'SELL';
    orderType?: 'MARKET' | 'LIMIT' | 'STOP' | 'TAKE_PROFIT' | 'LIQUIDATION' | 'TRAILING_STOP_MARKET';
    timeInForce?: 'GTC' | 'IOC' | 'FOK' | 'GTX';
    originalQuantity: number;
    originalPrice?: number;
    averagePrice?: number;
    orderStatus: 'NEW' | 'PARTIALLY_FILLED' | 'FILLED' | 'CANCELED' | 'REJECTED' | 'EXPIRED' | 'NEW_INSURANCE' | 'NEW_ADL';
    orderId: number;
    orderLastFilledQuantity?: number;
    orderFilledAccumulatedQuantity: number;
    positionSide?: 'LONG' | 'SHORT' | 'BOTH';
}
export interface IOrderFuturesMapById {
    [key: string]: IOrderFutures;
}
export interface IOrderUpdateCallbackFutures {
    eventType: string;
    eventTime: number;
    transaction: number;
    order: IOrderFutures;
}
export interface IOrderRawFutures {
    avgPrice: string;
    clientOrderId: string;
    cumQuote: string;
    executedQty: string;
    orderId: number;
    origQty: string;
    origType: 'MARKET' | 'LIMIT' | 'STOP' | 'TAKE_PROFIT' | 'LIQUIDATION' | 'TRAILING_STOP_MARKET';
    price: string;
    reduceOnly: boolean;
    side: 'BUY' | 'SELL';
    positionSide: 'LONG' | 'SHORT' | 'BOTH';
    status: 'NEW' | 'PARTIALLY_FILLED' | 'FILLED' | 'CANCELED' | 'EXPIRED' | 'NEW_INSURANCE' | 'NEW_ADL';
    stopPrice: string;
    closePosition: boolean;
    symbol: string;
    time: number;
    timeInForce: 'GTC' | 'IOC' | 'FOK' | 'GTX';
    type: 'MARKET' | 'LIMIT' | 'STOP' | 'TAKE_PROFIT' | 'LIQUIDATION' | 'TRAILING_STOP_MARKET';
    activatePrice: string;
    priceRate: string;
    updateTime: number;
    workingType: 'MARK_PRICE' | 'CONTRACT_PRICE';
    priceProtect: boolean;
    code?: number;
    msg?: string;
}
export interface IMgCallPositionFutures {
    symbol: string;
    positionSide: string;
    positionAmount: string;
    marginType: string;
    isolatedWallet: string;
    markPrice: string;
    unrealizedPnL: string;
    maintenanceMargin: string;
}
export interface IMarginCallCallbackFutures {
    eventType: string;
    eventTime: number;
    crossWalletBalance: string;
    positions: IMgCallPositionFutures[];
}
export interface IOrderUpdateCallbackFutures {
    eventType: string;
    eventTime: number;
    transaction: number;
    order: IOrderFutures;
}
export interface IAccUpdatePositionFutures {
    symbol: string;
    positionAmount: number;
    entryPrice: number;
    accumulatedRealized?: number;
    unrealizedPnL: number;
    marginType?: string;
    isolatedWallet?: number;
    positionSide: 'BOTH' | 'LONG' | 'SHORT';
    isRequest?: boolean;
}
export interface IAccUpdateBalanceFutures {
    asset: string;
    walletBalance: string;
    crossWalletBalance: string;
}
export interface IAccUpdateCallbackFutures {
    eventType: string;
    eventTime: number;
    transaction: number;
    updateData: {
        eventReasonType: 'DEPOSIT' | 'WITHDRAW' | 'ORDER' | 'FUNDING_FEE' | 'WITHDRAW_REJECT' | 'ADJUSTMENT' | 'INSURANCE_CLEAR' | 'ADMIN_DEPOSIT' | 'ADMIN_WITHDRAW' | 'MARGIN_TRANSFER' | 'MARGIN_TYPE_CHANGE' | 'ASSET_TRANSFER' | 'OPTIONS_PREMIUM_FEE' | 'OPTIONS_SETTLE_PROFIT' | 'AUTO_EXCHANGE';
        balances: IAccUpdateBalanceFutures[];
        positions: IAccUpdatePositionFutures[];
    };
}
export interface ITradeHistoryFutures {
    buyer: boolean;
    commission: string;
    commissionAsset: string;
    id: number;
    maker: boolean;
    orderId: number;
    price: string;
    qty: string;
    quoteQty: string;
    realizedPnl: string;
    side: 'BUY' | 'SELL';
    positionSide: 'BOTH' | 'LONG' | 'SHORT';
    symbol: string;
    time: number;
}
export interface IIsolatedFeeData {
    "vipLevel": number;
    "symbol": string;
    "leverage": string | number;
    "data": [
        {
            "coin": string;
            "dailyInterest": string | number;
            "borrowLimit": string | number;
        },
        {
            "coin": string;
            "dailyInterest": string | number;
            "borrowLimit": string | number;
        }
    ];
}
export {};
