import { tSetHistoryData } from "../LoadBase";
import { tGetAllData, tSocketInput, tUpDateAllKline } from "../IHistoryBase";
export { LoadQuoteBase } from "../LoadBase";
type tFetch = any | ((input: any | URL, init?: any | undefined) => Promise<any>);
type tBinanceSymbolsAllObjs = {
    fetch: tFetch;
    quoteAsset?: string;
};
export declare function BinanceSymbolsAllObjNew(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function BinanceSymbolsAllObjNewMargin(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function BinanceSymbolsAllObjNewMarginPlus(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function BinanceSymbolsAllObjNewMarginIsolated(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function MexcSymbolsAllObjNewMarginIsolated(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function SymbolsdUSASymbolsAllObjNewMarginIsolated(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function GateIoSymbolsAllObjNewMarginIsolated(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function BinanceSymbolsAllFuturesObj2(data: tBinanceSymbolsAllObjs): () => Promise<tGetAllData>;
export declare function BinanceSymbolsAllFuturesCoinM(data: tBinanceSymbolsAllObjs): () => Promise<{
    symbols: {
        name: any;
        tickSize: any;
        minPrice: any;
        minStepLot: any;
        minQty: any;
        stepSize: any;
        quoteAsset: any;
        baseAsset: any;
    }[];
}>;
export declare function BinanceSocketRealTimeSpotNew(_WebSocket: any): (info: {
    name: string;
}, callback: (data: tSocketInput) => void, disable: () => boolean, onclose: () => void) => void;
export declare function BinanceSocketKlineAllBase(setting: {
    WebSocket: any;
    url: string;
}): (callback: (mas: {
    data: Partial<tUpDateAllKline>;
    name: string;
}) => void, disable: () => boolean, onclose: () => void, data: {
    names: string[];
}) => void;
export declare function BinanceSocketKlineSpotAllNew(_WebSocket: any): (callback: (mas: {
    data: Partial<tUpDateAllKline>;
    name: string;
}) => void, disable: () => boolean, onclose: () => void, data: {
    names: string[];
}) => void;
export declare function BinanceSocketKlineFAll(_WebSocket: any): (callback: (mas: {
    data: Partial<tUpDateAllKline>;
    name: string;
}) => void, disable: () => boolean, onclose: () => void, data: {
    names: string[];
}) => void;
export declare function BinanceSocketKlineDAll(_WebSocket: any): (callback: (mas: {
    data: Partial<tUpDateAllKline>;
    name: string;
}) => void, disable: () => boolean, onclose: () => void, data: {
    names: string[];
}) => void;
export declare function BinanceSocketSpotAllTurboNew(_WebSocket: any): (callback: (mas: {
    data: tSocketInput;
    name: string;
}[]) => void, disable: () => boolean, onclose: () => void) => void;
export declare function BinanceSocketAllBase(data: {
    WebSocket: any;
    url?: string;
}): (callback: (mas: {
    data: tSocketInput;
    name: string;
}[]) => void, disable: () => boolean, onclose: () => void) => void;
export declare function BinanceSocketSpotAllNew(WebSocket: any): (callback: (mas: {
    data: tSocketInput;
    name: string;
}[]) => void, disable: () => boolean, onclose: () => void) => void;
export declare function BinanceSocketFuturesAll(WebSocket: any): (callback: (mas: {
    data: tSocketInput;
    name: string;
}[]) => void, disable: () => boolean, onclose: () => void) => void;
export declare function BinanceSocketDCoinMAll(WebSocket: any): (callback: (mas: {
    data: tSocketInput;
    name: string;
}[]) => void, disable: () => boolean, onclose: () => void) => void;
export declare const BinanceLoadEasySpot: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare const BinanceLoadEasyFutures: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare const BinanceLoadEasyFuturesM: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare const MexcLoadEasyFuturesM: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare const GateIoLoadEasySpot: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare const USALoadEasyFuturesM: (data?: {
    fetch?: tFetch;
}) => (info: import("../LoadBase").tInfoForLoadHistory) => Promise<tSetHistoryData[]>;
export declare namespace Test {
    function Test1(): void;
}
